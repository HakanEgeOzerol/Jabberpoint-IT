name: Java CI/CD Pipeline

on:
  push:
    branches: ["development", "feature/*"]
  pull_request:
    branches: ["development", "feature/*"]

jobs:
  #######################################################################
  # 1) Debug Logging – always runs to show context values
  #######################################################################
  debug-logging:
    runs-on: ubuntu-latest
    steps:
      - name: Print GitHub context
        run: |
          echo "=== DEBUG LOGGING ==="
          echo "github.ref = ${{ github.ref }}"
          echo "github.event_name = ${{ github.event_name }}"
          echo "github.base_ref (for pushes) = ${{ github.base_ref }}"
          echo "pull_request.base.ref (for PRs) = ${{ github.event.pull_request.base.ref || 'N/A' }}"
          echo "github.head_ref (for PRs) = ${{ github.head_ref }}"
          echo "github.sha = ${{ github.sha }}"
          echo "actor = ${{ github.actor }}"
          echo "repository = ${{ github.repository }}"
          echo "====================="

  #######################################################################
  # 2) Build and Unit Tests – always runs (feature or dev)
  #######################################################################
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      unit_pass_percent: ${{ steps.unit-tests.outputs.unit_pass_percent }}
      line_coverage: ${{ steps.coverage-check.outputs.line_coverage }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "maven"

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run unit tests
        id: unit-tests
        run: |
          echo "Running unit tests..."
          mvn test jacoco:report
          MVN_EXIT_CODE=$?

          # Calculate test statistics from surefire reports
          TOTAL_TESTS=$(find . -type f -name "TEST-*.xml" -path "*/surefire-reports/*" -exec grep -h "<testcase" {} \; | wc -l)
          FAILED=$(find . -type f -name "TEST-*.xml" -path "*/surefire-reports/*" -exec grep -h "<failure" {} \; | wc -l)
          ERRORS=$(find . -type f -name "TEST-*.xml" -path "*/surefire-reports/*" -exec grep -h "<error" {} \; | wc -l)
          PASSED=$(( TOTAL_TESTS - FAILED - ERRORS ))

          if [ $TOTAL_TESTS -gt 0 ]; then
            PASS_PERCENT=$(( 100 * PASSED / TOTAL_TESTS ))
          else
            PASS_PERCENT=0
          fi

          # Append unit test summary to the GitHub step summary file
          echo "### Unit Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Total Tests: $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "- Passed: $PASSED ($PASS_PERCENT%)" >> $GITHUB_STEP_SUMMARY

          # Fail the job if tests failed or Maven returned an error
          if [ $MVN_EXIT_CODE -ne 0 ] || [ $FAILED -gt 0 ] || [ $ERRORS -gt 0 ]; then
            echo "❌ Unit tests failed."
            exit 1
          fi

          # Export the percentage as an output for later jobs
          echo "unit_pass_percent=$PASS_PERCENT" >> $GITHUB_OUTPUT

      - name: Check code coverage
        id: coverage-check
        run: |
          echo "Checking code coverage..."
          # Extract coverage metrics
          COVERAGE_FILE="target/site/jacoco/index.html"
          if [ -f "$COVERAGE_FILE" ]; then
            LINE_COVERAGE=$(grep -o 'Total[^%]*%' "$COVERAGE_FILE" | grep -o '[0-9]\+%' | head -1 | grep -o '[0-9]\+')
            
            # Set minimum required coverage
            MIN_COVERAGE=80
            
            if [ "$LINE_COVERAGE" -lt "$MIN_COVERAGE" ]; then
              echo "⚠️ Warning: Code coverage is below minimum required coverage of ${MIN_COVERAGE}%"
              echo "Current coverage: ${LINE_COVERAGE}%"
            else
              echo "✅ Code coverage is above minimum required coverage of ${MIN_COVERAGE}%"
              echo "Current coverage: ${LINE_COVERAGE}%"
            fi
            
            # Export the coverage for later jobs
            echo "line_coverage=$LINE_COVERAGE" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Warning: No coverage report found"
            echo "line_coverage=0" >> $GITHUB_OUTPUT
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/target/surefire-reports/
            **/target/failsafe-reports/
          retention-days: 30

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: target/site/jacoco/
          retention-days: 30

  #######################################################################
  # 3) Integration Tests – always run, after build
  #######################################################################
  integration-tests:
    needs: build-and-test
    runs-on: ubuntu-latest
    outputs:
      integration_pass_percent: ${{ steps.integration-tests-run.outputs.integration_pass_percent }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Run Integration Tests
        id: integration-tests-run
        run: |
          echo "Running integration tests..."
          mvn verify -P integration-test

          # Parse integration test results from failsafe reports
          TOTAL_TESTS=$(find . -type f -name "TEST-*.xml" -path "*/failsafe-reports/*" -exec grep -h "<testcase" {} \; | wc -l)
          FAILED=$(find . -type f -name "TEST-*.xml" -path "*/failsafe-reports/*" -exec grep -h "<failure" {} \; | wc -l)
          ERRORS=$(find . -type f -name "TEST-*.xml" -path "*/failsafe-reports/*" -exec grep -h "<error" {} \; | wc -l)
          PASSED=$(( TOTAL_TESTS - FAILED - ERRORS ))

          if [ $TOTAL_TESTS -gt 0 ]; then
            PASS_PERCENT=$(( 100 * PASSED / TOTAL_TESTS ))
          else
            PASS_PERCENT=0
          fi

          echo "### Integration Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Total Tests: $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "- Passed: $PASSED ($PASS_PERCENT%)" >> $GITHUB_STEP_SUMMARY

          echo "integration_pass_percent=$PASS_PERCENT" >> $GITHUB_OUTPUT

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            **/target/failsafe-reports/
          retention-days: 30

  #######################################################################
  # 4) Acceptance Tests – always run, after integration
  #######################################################################
  acceptance-tests:
    needs: integration-tests
    runs-on: ubuntu-latest
    outputs:
      acceptance_pass_percent: ${{ steps.acceptance-tests-run.outputs.acceptance_pass_percent }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Run Acceptance Tests
        id: acceptance-tests-run
        run: |
          echo "Running acceptance tests..."
          mvn verify -P acceptance-test

          # Parse acceptance test results from failsafe reports
          TOTAL_TESTS=$(find . -type f -name "TEST-*.xml" -path "*/failsafe-reports/*" -exec grep -h "<testcase" {} \; | wc -l)
          FAILED=$(find . -type f -name "TEST-*.xml" -path "*/failsafe-reports/*" -exec grep -h "<failure" {} \; | wc -l)
          ERRORS=$(find . -type f -name "TEST-*.xml" -path "*/failsafe-reports/*" -exec grep -h "<error" {} \; | wc -l)
          PASSED=$(( TOTAL_TESTS - FAILED - ERRORS ))

          if [ $TOTAL_TESTS -gt 0 ]; then
            PASS_PERCENT=$(( 100 * PASSED / TOTAL_TESTS ))
          else
            PASS_PERCENT=0
          fi

          echo "### Acceptance Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Total Tests: $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "- Passed: $PASSED ($PASS_PERCENT%)" >> $GITHUB_STEP_SUMMARY

          echo "acceptance_pass_percent=$PASS_PERCENT" >> $GITHUB_OUTPUT

      - name: Upload acceptance test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: acceptance-test-results
          path: |
            **/target/failsafe-reports/
          retention-days: 30

  #######################################################################
  # 5) Auto-merge to Testing – runs only if on development branch
  #######################################################################
  merge-to-testing:
    needs: acceptance-tests
    runs-on: ubuntu-latest
    if: >
      (github.ref == 'refs/heads/development') ||
      (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'development')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-merge development -> testing
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git fetch origin
          git checkout testing || git checkout -b testing
          git merge origin/development --no-edit
          git push origin testing

  #######################################################################
  # 6) Auto-merge to Acceptance – runs only if on development branch,
  #    and generates an overall pipeline summary.
  #######################################################################
  merge-to-acceptance:
    needs:
      [merge-to-testing, build-and-test, integration-tests, acceptance-tests]
    runs-on: ubuntu-latest
    if: >
      (github.ref == 'refs/heads/development') ||
      (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'development')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: target/site/jacoco/

      - name: Auto-merge testing -> acceptance
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git fetch origin
          git checkout acceptance || git checkout -b acceptance
          git merge origin/testing --no-edit
          git push origin acceptance

      - name: Generate Pipeline Summary
        run: |
            echo "## Pipeline Summary" >> $GITHUB_STEP_SUMMARY
            
            echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
            echo "📊 **Line Coverage**: ${{ needs.build-and-test.outputs.line_coverage }}%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "### Automated Steps Completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Unit Tests**" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Integration Tests**" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Acceptance Tests**" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Merged to testing**" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Merged to acceptance**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "### Manual Steps Required" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Production Release Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Create a pull request from 'acceptance' to 'main'" >> $GITHUB_STEP_SUMMARY
            echo "2. Get required approvals" >> $GITHUB_STEP_SUMMARY
            echo "3. Merge to 'main'" >> $GITHUB_STEP_SUMMARY
            echo "4. Deploy to production" >> $GITHUB_STEP_SUMMARY
