name: Java CI/CD Pipeline

on:
  push:
    branches: ["development", "feature/*"]
  pull_request:
    branches: ["development", "feature/*"]

jobs:
  #######################################################################
  # 1) Debug Logging – optional, always runs to show context values
  #######################################################################
  debug-logging:
    runs-on: ubuntu-latest
    steps:
      - name: Print GitHub context
        run: |
          echo "=== DEBUG LOGGING ==="
          echo "github.ref = ${{ github.ref }}"
          echo "github.event_name = ${{ github.event_name }}"
          echo "github.base_ref (for pushes) = ${{ github.base_ref }}"
          echo "pull_request.base.ref (for PRs) = ${{ github.event.pull_request.base.ref || 'N/A' }}"
          echo "github.head_ref (for PRs) = ${{ github.head_ref }}"
          echo "github.sha = ${{ github.sha }}"
          echo "actor = ${{ github.actor }}"
          echo "repository = ${{ github.repository }}"
          echo "====================="

  #######################################################################
  # 2) Build and Unit Tests – always runs (feature or dev)
  #######################################################################
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "maven"

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          mvn test
          echo "Unit tests completed"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/target/surefire-reports/
            **/target/failsafe-reports/
          retention-days: 30

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: target/site/jacoco/
          retention-days: 30

  #######################################################################
  # 3) Integration Tests – always run, after build
  #######################################################################
  integration-tests:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Run Integration Tests
        run: |
          echo "Running integration tests..."
          mvn verify -P integration-test
          echo "Integration tests completed"

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            **/target/failsafe-reports/
          retention-days: 30

  #######################################################################
  # 4) Acceptance Tests – always run, after integration
  #######################################################################
  acceptance-tests:
    needs: integration-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Run Acceptance Tests
        run: |
          echo "Running acceptance tests..."
          mvn verify -P acceptance-test
          echo "Acceptance tests completed"

      - name: Upload acceptance test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: acceptance-test-results
          path: |
            **/target/failsafe-reports/
          retention-days: 30

  #######################################################################
  # 5) Auto-merge to Testing – runs only if dev, after acceptance tests
  #######################################################################
  merge-to-testing:
    needs: acceptance-tests
    runs-on: ubuntu-latest
    if: >
      (github.ref == 'refs/heads/development') ||
      (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'development')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-merge development -> testing
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git fetch origin
          git checkout testing || git checkout -b testing
          git merge origin/development --no-edit
          git push origin testing

  #######################################################################
  # 6) Auto-merge to Acceptance – runs only if dev, after merge-to-testing
  #######################################################################
  merge-to-acceptance:
    needs: merge-to-testing
    runs-on: ubuntu-latest
    if: >
      (github.ref == 'refs/heads/development') ||
      (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'development')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-merge testing -> acceptance
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git fetch origin
          git checkout acceptance || git checkout -b acceptance
          git merge origin/testing --no-edit
          git push origin acceptance

      - name: Generate Pipeline Summary
        run: |
          # Extract code coverage from JaCoCo report
          COVERAGE_FILE="target/site/jacoco/index.html"
          if [ -f "$COVERAGE_FILE" ]; then
            LINE_COVERAGE=$(grep -o 'Total[^%]*%' "$COVERAGE_FILE" | grep -o '[0-9]\+%' | head -1)
            echo "Line Coverage: $LINE_COVERAGE"
            echo "LINE_COVERAGE=$LINE_COVERAGE" >> $GITHUB_ENV
          else
            echo "No coverage report found"
            echo "LINE_COVERAGE=N/A" >> $GITHUB_ENV
          fi
          
          echo "## Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "📊 Line Coverage: $LINE_COVERAGE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Automated Steps Completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit Tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Integration Tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Acceptance Tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Merged to testing" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Merged to acceptance" >> $GITHUB_STEP_SUMMARY
          echo "### Manual Steps Required" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Production Release Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Create a pull request from 'acceptance' to 'main'" >> $GITHUB_STEP_SUMMARY
          echo "2. Get required approvals" >> $GITHUB_STEP_SUMMARY
          echo "3. Merge to main" >> $GITHUB_STEP_SUMMARY
          echo "4. Deploy to production" >> $GITHUB_STEP_SUMMARY
