name: Java CI/CD Pipeline

on:
  push:
    branches: ["development", "feature/*"]
  pull_request:
    branches: ["development", "feature/*"]

jobs:
  # 1) Debug Logging – optional job to show context values.
  debug-logging:
    runs-on: ubuntu-latest
    steps:
      - name: Print GitHub context
        run: |
          echo "=== DEBUG LOGGING ==="
          echo "github.ref = ${{ github.ref }}"
          echo "github.event_name = ${{ github.event_name }}"
          echo "github.base_ref (for pushes) = ${{ github.base_ref }}"
          echo "pull_request.base.ref (for PRs) = ${{ github.event.pull_request.base.ref || 'N/A' }}"
          echo "github.head_ref (for PRs) = ${{ github.head_ref }}"
          echo "github.sha = ${{ github.sha }}"
          echo "actor = ${{ github.actor }}"
          echo "repository = ${{ github.repository }}"
          echo "====================="

  # 2) Build and Unit Tests – always run (on dev or feature).
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "maven"

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          mvn test
          echo "Unit tests completed"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/target/surefire-reports/
            **/target/failsafe-reports/
          retention-days: 30

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: target/site/jacoco/
          retention-days: 30

  # 3) Merge dev -> testing, only if on dev (or PR base dev).
  merge-to-testing:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: >
      (github.ref == 'refs/heads/development') ||
      (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'development')
    steps:
      - name: Auto-merge development into testing
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git fetch origin
          git checkout testing || git checkout -b testing
          git merge development --no-edit
          git push origin testing

  # 4) Integration Tests on testing branch.
  integration-tests:
    needs: merge-to-testing
    runs-on: ubuntu-latest
    if: >
      (github.ref == 'refs/heads/development') ||
      (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'development')
    steps:
      - name: Check out testing branch
        run: |
          git fetch origin
          git checkout testing

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Run Integration Tests
        run: |
          echo "Running integration tests..."
          mvn verify -P integration-test
          echo "Integration tests completed"

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            **/target/failsafe-reports/
          retention-days: 30

  # 5) Merge testing -> acceptance, only if on dev.
  merge-to-acceptance:
    needs: integration-tests
    runs-on: ubuntu-latest
    if: >
      (github.ref == 'refs/heads/development') ||
      (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'development')
    steps:
      - name: Auto-merge testing into acceptance
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git fetch origin
          git checkout acceptance || git checkout -b acceptance
          git merge testing --no-edit
          git push origin acceptance

  # 6) Acceptance Tests on acceptance branch.
  acceptance-tests:
    needs: merge-to-acceptance
    runs-on: ubuntu-latest
    if: >
      (github.ref == 'refs/heads/development') ||
      (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'development')
    steps:
      - name: Check out acceptance branch
        run: |
          git fetch origin
          git checkout acceptance

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Run Acceptance Tests
        run: |
          echo "Running acceptance tests..."
          mvn verify -P acceptance-test
          echo "Acceptance tests completed"

      - name: Upload acceptance test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: acceptance-test-results
          path: |
            **/target/failsafe-reports/
          retention-days: 30

  # 7) Merge acceptance -> main, only if on dev.
  merge-to-main:
    needs: acceptance-tests
    runs-on: ubuntu-latest
    if: >
      (github.ref == 'refs/heads/development') ||
      (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'development')
    steps:
      - name: Auto-merge acceptance into main
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git fetch origin
          git checkout main || git checkout -b main
          git merge acceptance --no-edit
          git push origin main

  # 8) Production Deploy, only if on dev.
  production-deploy:
    needs: merge-to-main
    runs-on: ubuntu-latest
    environment: production
    if: >
      (github.ref == 'refs/heads/development') ||
      (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'development')
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Production
        run: echo "Deploying to PRODUCTION environment"
