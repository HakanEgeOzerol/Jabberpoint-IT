name: Java CI/CD Pipeline

on:
  push:
    branches: [ "development", "testing", "acceptance", "main" ]
  pull_request:
    branches: [ "development", "testing", "acceptance", "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      
    - name: Run tests and generate coverage
      run: mvn verify
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: target/surefire-reports/
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: target/site/jacoco/

    - name: Run OWASP dependency check
      run: mvn org.owasp:dependency-check-maven:check
        
    - name: Cache build artifacts
      uses: actions/cache@v3
      with:
        path: target/
        key: ${{ runner.os }}-build-${{ github.sha }}

  deploy-to-test:
    needs: build-and-test
    if: github.ref == 'refs/heads/testing'
    runs-on: ubuntu-latest
    environment: 
      name: testing
      url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Restore cached artifacts
        uses: actions/cache@v3
        with:
          path: target/
          key: ${{ runner.os }}-build-${{ github.sha }}
          
      - name: Run Integration Tests
        run: mvn verify -P integration-test
        
      - name: Deploy to Test Environment
        id: deploy
        run: |
          echo "Deploying to TEST environment"
          # Add your deployment commands here
          echo "deployment-url=https://test.yourapp.com" >> $GITHUB_OUTPUT

  deploy-to-acceptance:
    needs: deploy-to-test
    if: github.ref == 'refs/heads/acceptance'
    runs-on: ubuntu-latest
    environment:
      name: acceptance
      url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Restore cached artifacts
        uses: actions/cache@v3
        with:
          path: target/
          key: ${{ runner.os }}-build-${{ github.sha }}
          
      - name: Run Acceptance Tests
        run: |
          echo "Running acceptance tests..."
          mvn verify -P acceptance-test
          
      - name: Deploy to Acceptance
        id: deploy
        run: |
          echo "Deploying to ACCEPTANCE environment"
          # Add your deployment commands here
          echo "deployment-url=https://acceptance.yourapp.com" >> $GITHUB_OUTPUT
          
      - name: Smoke Test
        run: |
          echo "Running smoke tests on acceptance environment"
          # Add smoke test commands here

  deploy-to-production:
    needs: deploy-to-acceptance
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Restore cached artifacts
        uses: actions/cache@v3
        with:
          path: target/
          key: ${{ runner.os }}-build-${{ github.sha }}
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
          
      - name: Deploy to Production
        id: deploy
        run: |
          echo "Deploying to PRODUCTION environment"
          # Add your deployment commands here
          echo "deployment-url=https://prod.yourapp.com" >> $GITHUB_OUTPUT
          
      - name: Production Health Check
        run: |
          echo "Running health checks on production environment"
          # Add health check commands here
          
      - name: Notify Deployment
        if: always()
        run: |
          echo "Notifying team about deployment status"
          # Add notification commands here (e.g., Slack, Email)
